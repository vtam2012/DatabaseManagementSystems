---
title: "Explore Query Planning and Indexing"
name: "Vincent Tam"
course: "CS5200"
semester: "Fall 2022"
output: html_notebook
---
```{r}
# Import RSQLite library
library(RSQLite)

# Load RMariaDB library for MySQL
library(RMariaDB)

# Load DBI library for functions (dbConnect, dbListTables, dbWriteTable)
library(DBI)

dbfile = "sakila.db"

#create dbcon variable
dbconLite <- dbConnect(RSQLite::SQLite(), dbfile)

# create connection variable to MariaDB.
dbconMYSQL <- dbConnect(drv = RMariaDB::MariaDB(), username = NULL, password = Sys.getenv("MYSQL_PASSWORD"),host = "localhost")
```

```{r}
# NOTE: MariaDB is run locally, must execute "mysql.server start" in command line terminal prior to executing dbConnect

# NOTE: sakila database for MariaDB was installed using the instructions posted here: https://dev.mysql.com/doc/sakila/en/sakila-installation.html
# 1. Downloaded zip file from: https://dev.mysql.com/doc/index-other.html
# 2. executed "mysql" in command line terminal, root is the default user no password needed
# 3. located path to downloaded files "sakila-schema.sql" and "sakila-data.sql"
# 4. SOURCE in "sakila-schema.sql" and "sakila-data.sql"
# 5. Run "mysql.server start"
```

```{r}
# SQLite
```

```{sql connection=dbconLite}
/* Show current indexes, notice that no index is present for flim's replacement cost */
SELECT
   `type`, 
   `name`, 
   `tbl_name`, 
   `sql`
  FROM sqlite_master
WHERE `type` = 'index';
```

```{r}
# Time elapsed for select query on replacement_cost in table film, before an index was created showed 0.001 to 0.002 seconds.
filmReplacementQuery1 <- function ()
{
  dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery1());
```

```{sql connection=dbconLite}
/* Create an index on table film's replacement_cost column */
CREATE INDEX filmReplacementCost
    ON film (replacement_cost);
```

```{sql connection=dbconLite}
/* Verify that the index is indeed created */
SELECT
   `type`, 
   `name`, 
   `tbl_name`, 
   `sql`
  FROM sqlite_master
WHERE `type` = 'index';
```

```{r}
# Run the same query again but now with our created index. Time elapsed is still shown as 0.001 to 0.002 seconds, so there is little to no change in SQLite when an index is added.
filmReplacementQuery2 <- function ()
{
  dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery2());
```

```{r}
# MySQL (MariaDB)
```

```{sql connection=dbconMYSQL}
/* Show Existing Databases */
SHOW DATABASES;
```

```{sql connection=dbconMYSQL}
/* Use sakila database */
USE SAKILA;
```

```{sql connection=dbconMYSQL}
/* Show current indexes from the table "film", notice that no index is present for flim's replacement cost */
SHOW INDEXES FROM film;
```

```{r}
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.009 seconds.
filmReplacementQuery3 <- function ()
{
  dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
```

```{sql connection=dbconMYSQL}
/* Create an index on table film's replacement_cost column */
CREATE INDEX filmReplacementCost
    ON film (replacement_cost);
```

```{sql connection=dbconMYSQL}
/* Verify that the index is indeed created */
SHOW INDEXES FROM film;
```

```{r}
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is three times as fast when an index is present in MySQL.
filmReplacementQuery4 <- function ()
{
  dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
```

```{r}
# Time elasped for select query on joining the three tables (film, film_actor, and film) on SQLite showed 0.001 to 0.002 seconds. 
ThreeJoinQuery1 <- function ()
{
  dbExecute(dbconLite, 
  "SELECT actor.first_name, actor.last_name, film.title, film.release_year 
   FROM actor
   JOIN film_actor
   ON actor.actor_id = film_actor.actor_id
   JOIN film
   ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
```

```{r}
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.233 to 0.252 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
  dbExecute(dbconMYSQL, 
  "SELECT actor.first_name, actor.last_name, film.title, film.release_year 
   FROM actor
   JOIN film_actor
   ON actor.actor_id = film_actor.actor_id
   JOIN film
   ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery2());
```

```{r}
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.003 to 0.004 seconds.
GroupByQuery1 <- function ()
{
  dbExecute(dbconLite, 
  "SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery1());
```

```{r}
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on MySQL showed 0.002 to 0.003 seconds. Both SQLite and MySQL are fast when grouping by the primary key and only having a single table involved, which makes sense.
GroupByQuery2 <- function ()
{
  dbExecute(dbconMYSQL, 
  "SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery2());
```


```{r}
# Testing Functions, Time elapsed for a query with a difference between two dates on SQLite showed 0.003 to 0.007 seconds.
AdditionalQuery1 <- function ()
{
  dbExecute(dbconLite, 
  "SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(GroupByQuery1());
```

```{r}
# Testing Functions, Time elapsed for a query with a difference between two dates on MySQL showed 0.011 to 0.013 seconds, which is double that of 0.007 from SQLite. I assume that functions are slower on MySQL than SQLite.
AdditionalQuery2 <- function ()
{
  dbExecute(dbconMYSQL, 
  "SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(AdditionalQuery2());
```

```{r}
#Disconnect From Databases
dbDisconnect(dbconLite)
dbDisconnect(dbconMYSQL)
```