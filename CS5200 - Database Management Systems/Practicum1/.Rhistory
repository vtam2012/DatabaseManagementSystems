# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.015 to 0.016 seconds.
filmReplacementQuery4 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.015 to 0.016 seconds.
filmReplacementQuery4 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
#Disconnect From Database
dbDisconnect(dbconLite)
dbDisconnect(dbconMYSQL)
# Import RSQLite library
library(RSQLite)
# Load RMariaDB library for MySQL
library(RMariaDB)
# Load DBI library for functions (dbConnect, dbListTables, dbWriteTable)
library(DBI)
dbfile = "sakila.db"
#create dbcon variable
dbconLite <- dbConnect(RSQLite::SQLite(), dbfile)
# create connection variable to MariaDB.
dbconMYSQL <- dbConnect(drv = RMariaDB::MariaDB(), username = NULL, password = Sys.getenv("MYSQL_PASSWORD"),host = "localhost")
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.001 seconds.
filmReplacementQuery1 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery1());
# Run the same query again but now with our created index. Time elapsed is still shown as 0.001 seconds, so there is no change in SQLite
filmReplacementQuery2 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery2());
# Run the same query again but now with our created index. Time elapsed is still shown as 0.001 to 0.002 seconds, so there is little to no change in SQLite when an index is added.
filmReplacementQuery2 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery2());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
filmReplacementQuery4 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
filmReplacementQuery4 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
filmReplacementQuery4 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.246 seconds which is twice as fast when an index is present in MySQL.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.246 seconds which is twice as fast when an index is present in MySQL.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  showed 0.001 seconds.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.001 seconds.
GroupByQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery1());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.004 seconds.
GroupByQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery2());
# Import RSQLite library
library(RSQLite)
# Load RMariaDB library for MySQL
library(RMariaDB)
# Load DBI library for functions (dbConnect, dbListTables, dbWriteTable)
library(DBI)
dbfile = "sakila.db"
#create dbcon variable
dbconLite <- dbConnect(RSQLite::SQLite(), dbfile)
# create connection variable to MariaDB.
dbconMYSQL <- dbConnect(drv = RMariaDB::MariaDB(), username = NULL, password = Sys.getenv("MYSQL_PASSWORD"),host = "localhost")
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.001 seconds.
filmReplacementQuery1 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery1());
# Run the same query again but now with our created index. Time elapsed is still shown as 0.001 to 0.002 seconds, so there is little to no change in SQLite when an index is added.
filmReplacementQuery2 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery2());
# Time elapsed for select query on replacement_cost in table film, before an index was created showed 0.001 seconds.
filmReplacementQuery1 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery1());
# Run the same query again but now with our created index. Time elapsed is still shown as 0.001 to 0.002 seconds, so there is little to no change in SQLite when an index is added.
filmReplacementQuery2 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery2());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
filmReplacementQuery4 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
# Time elasped for select query on joining the three tables (film, film_actor, and film) on SQLite showed 0.001 seconds.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
#Disconnect From Database
dbDisconnect(dbconLite)
dbDisconnect(dbconMYSQL)
# Import RSQLite library
library(RSQLite)
# Load RMariaDB library for MySQL
library(RMariaDB)
# Load DBI library for functions (dbConnect, dbListTables, dbWriteTable)
library(DBI)
dbfile = "sakila.db"
#create dbcon variable
dbconLite <- dbConnect(RSQLite::SQLite(), dbfile)
# create connection variable to MariaDB.
dbconMYSQL <- dbConnect(drv = RMariaDB::MariaDB(), username = NULL, password = Sys.getenv("MYSQL_PASSWORD"),host = "localhost")
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.004 seconds.
AdditionalQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(GroupByQuery1());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.004 seconds.
AdditionalQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECTrental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(AdditionalQuery2());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.004 seconds.
AdditionalQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(AdditionalQuery2());
# Import RSQLite library
library(RSQLite)
# Load RMariaDB library for MySQL
library(RMariaDB)
# Load DBI library for functions (dbConnect, dbListTables, dbWriteTable)
library(DBI)
dbfile = "sakila.db"
#create dbcon variable
dbconLite <- dbConnect(RSQLite::SQLite(), dbfile)
# create connection variable to MariaDB.
dbconMYSQL <- dbConnect(drv = RMariaDB::MariaDB(), username = NULL, password = Sys.getenv("MYSQL_PASSWORD"),host = "localhost")
# Time elapsed for select query on replacement_cost in table film, before an index was created showed 0.001 seconds.
filmReplacementQuery1 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery1());
# Run the same query again but now with our created index. Time elapsed is still shown as 0.001 to 0.002 seconds, so there is little to no change in SQLite when an index is added.
filmReplacementQuery2 <- function ()
{
dbExecute(dbconLite, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery2());
# Time elasped for select query on replacement_cost in table film, before an index was created showed 0.007 seconds.
filmReplacementQuery3 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery3());
# Time elasped for select query on replacement_cost in table film, after an index was created showed 0.003 seconds which is twice as fast when an index is present in MySQL.
filmReplacementQuery4 <- function ()
{
dbExecute(dbconMYSQL, "SELECT * FROM film WHERE replacement_cost > 14.99;")
}
system.time(filmReplacementQuery4());
# Time elasped for select query on joining the three tables (film, film_actor, and film) on SQLite showed 0.001 seconds.
ThreeJoinQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery1());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery2());
# Time elasped for select query on joining the three tables (film, film_actor, and film)  MySQL showed 0.238 to 0.252 seconds which is about 200 times as slow as SQLite. This shows that joins are an expensive operation in MySQL which is expected as it takes O(n^2) time to join two tables and another O(n^2) time to join the last table.
ThreeJoinQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT actor.first_name, actor.last_name, film.title, film.release_year
FROM actor
JOIN film_actor
ON actor.actor_id = film_actor.actor_id
JOIN film
ON film_actor.film_id = film.film_id;")
}
system.time(ThreeJoinQuery2());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.004 seconds.
GroupByQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery1());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.004 seconds.
GroupByQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery1());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on SQLite showed 0.003 to 0.004 seconds.
GroupByQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery1());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on MySQL showed 0.002 seconds. Both SQLite and MySQL are fast when grouping by the primary key and only having a single table involved, which makes sense.
GroupByQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery2());
# Time elapsed for a query on a single table with group by having a where clause that involves only the primary key column on MySQL showed 0.002 to  seconds. Both SQLite and MySQL are fast when grouping by the primary key and only having a single table involved, which makes sense.
GroupByQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT * FROM rental WHERE rental_id <= 500 GROUP BY rental_date;")
}
system.time(GroupByQuery2());
# Testing Functions, Time elapsed for a query with a difference between two dates on SQLite showed 0.007 seconds.
AdditionalQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(GroupByQuery1());
# Testing Functions, Time elapsed for a query with a difference between two dates on SQLite showed 0.003 to 0.007 seconds.
AdditionalQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(GroupByQuery1());
# Testing Functions, Time elapsed for a query with a difference between two dates on SQLite showed 0.003 to 0.007 seconds.
AdditionalQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(GroupByQuery1());
# Testing Functions, Time elapsed for a query with a difference between two dates on SQLite showed 0.003 to 0.007 seconds.
AdditionalQuery1 <- function ()
{
dbExecute(dbconLite,
"SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(GroupByQuery1());
# Testing Functions, Time elapsed for a query with a difference between two dates on MySQL showed 0.013 seconds, which is double that of 0.007 from SQLite. I assume that functions are slower on MySQL than SQLite.
AdditionalQuery2 <- function ()
{
dbExecute(dbconMYSQL,
"SELECT rental_id, DATEDIFF(return_date, rental_date) as DaysRented FROM rental;")
}
system.time(AdditionalQuery2());
#Disconnect From Databases
dbDisconnect(dbconLite)
dbDisconnect(dbconMYSQL)
